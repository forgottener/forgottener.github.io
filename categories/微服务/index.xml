<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>微服务 on 猿资猿味 - 高波的博客</title><link>https://gaoboy.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><description>Recent content in 微服务 on 猿资猿味 - 高波的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;a rel="license noopener" href="https://beian.miit.gov.cn/" target="_blank">浙ICP备14043338号-2&lt;/a>~&lt;a rel="license noopener" href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802003111" target="_blank">浙公网安备 33010802003111号&lt;/a></copyright><lastBuildDate>Thu, 22 Nov 2018 17:50:02 +0800</lastBuildDate><atom:link href="https://gaoboy.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>重构单体为微服务</title><link>https://gaoboy.com/post/refactoring-a-monolith-into-microservices/</link><pubDate>Thu, 22 Nov 2018 17:50:02 +0800</pubDate><guid>https://gaoboy.com/post/refactoring-a-monolith-into-microservices/</guid><description>©️Refactoring a Monolith into Microservices 微服务重构概述 单体应用程序转换为微服务的过程是应用程序现代化的一种形式。这是几十年来开发人员一直在做的事情</description></item><item><title>选择微服务部署策略</title><link>https://gaoboy.com/post/deploying-microservices/</link><pubDate>Thu, 22 Nov 2018 17:45:58 +0800</pubDate><guid>https://gaoboy.com/post/deploying-microservices/</guid><description>©️Choosing a Microservices Deployment Strategy 动机 部署单体应用程序意味着运行一个或多个相同副本的单个较大的应用程序。您通常会在每台服务器上配置 N 个服务器（物理</description></item><item><title>事件驱动数据管理</title><link>https://gaoboy.com/post/event-driven-data-management-microservices/</link><pubDate>Thu, 22 Nov 2018 17:34:35 +0800</pubDate><guid>https://gaoboy.com/post/event-driven-data-management-microservices/</guid><description>©️Event-Driven Data Management for Microservices 微服务和分布式数据 管理问题 单体应用程序通常具有一个单一的关系型数据库。使用关系型数据库的一个主要优点是您</description></item><item><title>服务发现</title><link>https://gaoboy.com/post/service-discovery-in-a-microservices-architecture/</link><pubDate>Thu, 22 Nov 2018 17:05:59 +0800</pubDate><guid>https://gaoboy.com/post/service-discovery-in-a-microservices-architecture/</guid><description>©️Service Discovery in a Microservices Architecture 为何使用服务发现 我们假设您正在编写某些代码，这些代码调用了有 REST API 或 Thrift API 的服务。为了发送一个请求，您的代码需要知道</description></item><item><title>进程间通信</title><link>https://gaoboy.com/post/building-microservices-inter-process-communication/</link><pubDate>Thu, 22 Nov 2018 16:52:33 +0800</pubDate><guid>https://gaoboy.com/post/building-microservices-inter-process-communication/</guid><description>©️Building Microservices: Inter-Process Communication in a Microservices Architecture 简介 在单体应用程序中，组件可通过语言级方法或者函数相互调用。相比之下，基于微服务的应用程序是一个运行在多台</description></item><item><title>使用 API 网关</title><link>https://gaoboy.com/post/building-microservices-using-an-api-gateway/</link><pubDate>Thu, 22 Nov 2018 16:46:47 +0800</pubDate><guid>https://gaoboy.com/post/building-microservices-using-an-api-gateway/</guid><description>©️Building Microservices: Using an API Gateway 简介 我们假设您正在为一个购物应用开发一个原生移动客户端。您可能需要实现一个产品详细信息页面，用于展示给定商品的</description></item><item><title>微服务简介</title><link>https://gaoboy.com/post/introduction-to-microservices/</link><pubDate>Thu, 22 Nov 2018 16:34:27 +0800</pubDate><guid>https://gaoboy.com/post/introduction-to-microservices/</guid><description>©️Introduction to Microservices 构建单体应用 我们假设，您开始开发一个打车应用，打算与 Uber 和 Hailo 竞争。经过初步交流和需求收集，您开始手动或者使用类</description></item></channel></rss>