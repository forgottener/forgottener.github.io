<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 猿资猿味 - 高波的博客</title><link>https://gaoboy.com/post/</link><description>Recent content in Posts on 猿资猿味 - 高波的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&lt;a rel="license noopener" href="https://beian.miit.gov.cn/" target="_blank">浙ICP备14043338号-2&lt;/a>~&lt;a rel="license noopener" href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802003111" target="_blank">浙公网安备 33010802003111号&lt;/a></copyright><lastBuildDate>Wed, 24 Feb 2021 16:19:40 +0800</lastBuildDate><atom:link href="https://gaoboy.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Unraid下Docker部署Nextcloud网盘</title><link>https://gaoboy.com/post/unraid-docker-nextcloud-setting-ddns-proxy/</link><pubDate>Wed, 24 Feb 2021 16:19:40 +0800</pubDate><guid>https://gaoboy.com/post/unraid-docker-nextcloud-setting-ddns-proxy/</guid><description/></item><item><title>M73 Tiny 黑苹果小记</title><link>https://gaoboy.com/post/m73-4k60hz-hackintosh/</link><pubDate>Sun, 14 Feb 2021 15:14:54 +0800</pubDate><guid>https://gaoboy.com/post/m73-4k60hz-hackintosh/</guid><description/></item><item><title>微服务架构设计模式</title><link>https://gaoboy.com/post/microservices-design-pattern/</link><pubDate>Sun, 15 Dec 2019 10:28:45 +0800</pubDate><guid>https://gaoboy.com/post/microservices-design-pattern/</guid><description>概述 微服务能在企业中发挥积极作用。因此了解微服务架构（MSA）设计的一般目标或原则，以及一些微服务的设计模式，都是是很有意义的 降低成本：MS</description></item><item><title>重构单体为微服务</title><link>https://gaoboy.com/post/refactoring-a-monolith-into-microservices/</link><pubDate>Thu, 22 Nov 2018 17:50:02 +0800</pubDate><guid>https://gaoboy.com/post/refactoring-a-monolith-into-microservices/</guid><description>©️Refactoring a Monolith into Microservices 微服务重构概述 单体应用程序转换为微服务的过程是应用程序现代化的一种形式。这是几十年来开发人员一直在做的事情</description></item><item><title>选择微服务部署策略</title><link>https://gaoboy.com/post/deploying-microservices/</link><pubDate>Thu, 22 Nov 2018 17:45:58 +0800</pubDate><guid>https://gaoboy.com/post/deploying-microservices/</guid><description>©️Choosing a Microservices Deployment Strategy 动机 部署单体应用程序意味着运行一个或多个相同副本的单个较大的应用程序。您通常会在每台服务器上配置 N 个服务器（物理</description></item><item><title>事件驱动数据管理</title><link>https://gaoboy.com/post/event-driven-data-management-microservices/</link><pubDate>Thu, 22 Nov 2018 17:34:35 +0800</pubDate><guid>https://gaoboy.com/post/event-driven-data-management-microservices/</guid><description>©️Event-Driven Data Management for Microservices 微服务和分布式数据 管理问题 单体应用程序通常具有一个单一的关系型数据库。使用关系型数据库的一个主要优点是您</description></item><item><title>服务发现</title><link>https://gaoboy.com/post/service-discovery-in-a-microservices-architecture/</link><pubDate>Thu, 22 Nov 2018 17:05:59 +0800</pubDate><guid>https://gaoboy.com/post/service-discovery-in-a-microservices-architecture/</guid><description>©️Service Discovery in a Microservices Architecture 为何使用服务发现 我们假设您正在编写某些代码，这些代码调用了有 REST API 或 Thrift API 的服务。为了发送一个请求，您的代码需要知道</description></item><item><title>进程间通信</title><link>https://gaoboy.com/post/building-microservices-inter-process-communication/</link><pubDate>Thu, 22 Nov 2018 16:52:33 +0800</pubDate><guid>https://gaoboy.com/post/building-microservices-inter-process-communication/</guid><description>©️Building Microservices: Inter-Process Communication in a Microservices Architecture 简介 在单体应用程序中，组件可通过语言级方法或者函数相互调用。相比之下，基于微服务的应用程序是一个运行在多台</description></item><item><title>使用 API 网关</title><link>https://gaoboy.com/post/building-microservices-using-an-api-gateway/</link><pubDate>Thu, 22 Nov 2018 16:46:47 +0800</pubDate><guid>https://gaoboy.com/post/building-microservices-using-an-api-gateway/</guid><description>©️Building Microservices: Using an API Gateway 简介 我们假设您正在为一个购物应用开发一个原生移动客户端。您可能需要实现一个产品详细信息页面，用于展示给定商品的</description></item><item><title>微服务简介</title><link>https://gaoboy.com/post/introduction-to-microservices/</link><pubDate>Thu, 22 Nov 2018 16:34:27 +0800</pubDate><guid>https://gaoboy.com/post/introduction-to-microservices/</guid><description>©️Introduction to Microservices 构建单体应用 我们假设，您开始开发一个打车应用，打算与 Uber 和 Hailo 竞争。经过初步交流和需求收集，您开始手动或者使用类</description></item><item><title>如何应对高并发</title><link>https://gaoboy.com/post/how-to-handle-high-concurrency/</link><pubDate>Thu, 22 Nov 2018 09:53:55 +0800</pubDate><guid>https://gaoboy.com/post/how-to-handle-high-concurrency/</guid><description>什么是高并发 高并发(High Concurrency)是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行</description></item><item><title>CAP 定理和 BASE 理论</title><link>https://gaoboy.com/post/cap-base/</link><pubDate>Wed, 21 Nov 2018 18:05:44 +0800</pubDate><guid>https://gaoboy.com/post/cap-base/</guid><description>CAP 定理（CAP theorem） 在计算机科学中，CAP 定理（CAP theorem）, 又被称作 布鲁尔定理（Brewer&amp;rsquo;s theor</description></item><item><title>Docker Compose介绍</title><link>https://gaoboy.com/post/docker-compose/</link><pubDate>Tue, 01 Mar 2016 14:56:59 +0800</pubDate><guid>https://gaoboy.com/post/docker-compose/</guid><description>YAML 配置文件语言 YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。YAML 语言的设计目标，就是方便人类读写。它实质上是一种通用的数</description></item><item><title>Docker 安全介绍</title><link>https://gaoboy.com/post/docker-safety/</link><pubDate>Tue, 01 Mar 2016 14:33:34 +0800</pubDate><guid>https://gaoboy.com/post/docker-safety/</guid><description>Docker 内核命名空间 Docker 容器和 LXC 容器很相似，所提供的安全特性也差不多。当用 docker run 启动一个容器时，在后台 Docker 为容器创建了一个独立的命名空间和控制组集合。 命</description></item><item><title>Docker Network介绍</title><link>https://gaoboy.com/post/docker-network/</link><pubDate>Tue, 01 Mar 2016 14:18:33 +0800</pubDate><guid>https://gaoboy.com/post/docker-network/</guid><description>容器的连接（linking）系统是除了端口映射外，另一种跟容器中应用交互的方式。 该系统会在源和接收容器之间创建一个隧道，接收容器可以看到源容</description></item><item><title>Docker 数据卷介绍</title><link>https://gaoboy.com/post/docker-volume/</link><pubDate>Tue, 01 Mar 2016 14:13:08 +0800</pubDate><guid>https://gaoboy.com/post/docker-volume/</guid><description>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性： 数据卷可以在容器之间共享和重用 对数据卷的修改会立马生效 对</description></item><item><title>Docker 仓库介绍</title><link>https://gaoboy.com/post/docker-hub/</link><pubDate>Tue, 01 Mar 2016 14:08:24 +0800</pubDate><guid>https://gaoboy.com/post/docker-hub/</guid><description>目前 Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了超过 15,000 的镜像。大部分需求，都可以通过在 Docker Hub 中直接下载镜像来实现。 登录 可以通过执行 docker login 命令</description></item><item><title>Docker 容器介绍</title><link>https://gaoboy.com/post/docker-container/</link><pubDate>Tue, 01 Mar 2016 13:06:25 +0800</pubDate><guid>https://gaoboy.com/post/docker-container/</guid><description>Docker 进入容器 在使用 -d 参数时，容器启动后会进入后台。 某些时候需要进入容器进行操作，有很多种方法，包括使用 docker attach 命令或 nsenter 工具等。 attach 命令 docker attach 是 Docker 自带的</description></item><item><title>Docker 镜像介绍</title><link>https://gaoboy.com/post/docker-image/</link><pubDate>Tue, 01 Mar 2016 12:16:59 +0800</pubDate><guid>https://gaoboy.com/post/docker-image/</guid><description>Docker 镜像的实现原理 Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。 通常 Union FS</description></item><item><title>Docker 简介和安装</title><link>https://gaoboy.com/post/docker-introduction/</link><pubDate>Tue, 01 Mar 2016 11:30:51 +0800</pubDate><guid>https://gaoboy.com/post/docker-introduction/</guid><description>什么是 Docker 官网地址：https://www.docker.com/ Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年</description></item><item><title>Ubuntu Lvm 扩容教程</title><link>https://gaoboy.com/post/ubuntu-lvm-expansion/</link><pubDate>Thu, 25 Feb 2016 09:40:26 +0800</pubDate><guid>https://gaoboy.com/post/ubuntu-lvm-expansion/</guid><description/></item><item><title>SpringBoot 入门指引</title><link>https://gaoboy.com/post/springboot-introduction/</link><pubDate>Sat, 21 Mar 2015 14:25:40 +0800</pubDate><guid>https://gaoboy.com/post/springboot-introduction/</guid><description/></item><item><title>Java 异常处理</title><link>https://gaoboy.com/post/java-exception-handle/</link><pubDate>Sun, 25 Jan 2015 14:58:53 +0800</pubDate><guid>https://gaoboy.com/post/java-exception-handle/</guid><description>概述 异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。 比如说，你的代码少了一个分号，那么运行出来结果是提示是错</description></item><item><title>Java Scanner 类</title><link>https://gaoboy.com/post/java-scanner/</link><pubDate>Sun, 25 Jan 2015 14:56:23 +0800</pubDate><guid>https://gaoboy.com/post/java-scanner/</guid><description>概述 java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。 下面是创建 Scanner 对象的基本语法： Scanner s = new Scanner(System.in); 接下来我们演示一个最简单的的数据输入，并通过 Scanner 类</description></item><item><title>Java 流(Stream)、文件(File)和IO</title><link>https://gaoboy.com/post/java-stream-file-io/</link><pubDate>Sun, 25 Jan 2015 14:56:23 +0800</pubDate><guid>https://gaoboy.com/post/java-stream-file-io/</guid><description>概述 Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。 Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符</description></item><item><title>Java 方法</title><link>https://gaoboy.com/post/java-function/</link><pubDate>Sun, 25 Jan 2015 14:53:33 +0800</pubDate><guid>https://gaoboy.com/post/java-function/</guid><description>概述 在前面几个章节中我们经常使用到System.out.println()，那么它是什么呢？ println()是一个方法 (Method)，而</description></item><item><title>Java 正则表达式</title><link>https://gaoboy.com/post/java-regex/</link><pubDate>Sun, 25 Jan 2015 14:43:23 +0800</pubDate><guid>https://gaoboy.com/post/java-regex/</guid><description/></item><item><title>Java 日期时间</title><link>https://gaoboy.com/post/java-date/</link><pubDate>Sun, 25 Jan 2015 14:42:23 +0800</pubDate><guid>https://gaoboy.com/post/java-date/</guid><description/></item><item><title>Java 数组</title><link>https://gaoboy.com/post/java-array/</link><pubDate>Sun, 25 Jan 2015 14:38:23 +0800</pubDate><guid>https://gaoboy.com/post/java-array/</guid><description/></item><item><title>Java StringBuffer &amp; StringBuilder 类</title><link>https://gaoboy.com/post/java-stringbuffer-and-stringbuilder-class/</link><pubDate>Sun, 25 Jan 2015 14:33:15 +0800</pubDate><guid>https://gaoboy.com/post/java-stringbuffer-and-stringbuilder-class/</guid><description/></item><item><title>Java String 类</title><link>https://gaoboy.com/post/java-string-class/</link><pubDate>Sun, 25 Jan 2015 14:30:15 +0800</pubDate><guid>https://gaoboy.com/post/java-string-class/</guid><description/></item><item><title>Java Character 类</title><link>https://gaoboy.com/post/java-character-class/</link><pubDate>Sun, 25 Jan 2015 14:28:25 +0800</pubDate><guid>https://gaoboy.com/post/java-character-class/</guid><description/></item><item><title>Java Number &amp; Math 类</title><link>https://gaoboy.com/post/java-number-and-math-class/</link><pubDate>Sun, 25 Jan 2015 14:26:25 +0800</pubDate><guid>https://gaoboy.com/post/java-number-and-math-class/</guid><description/></item><item><title>Java 分支结构</title><link>https://gaoboy.com/post/java-branching-structure/</link><pubDate>Sun, 25 Jan 2015 14:22:21 +0800</pubDate><guid>https://gaoboy.com/post/java-branching-structure/</guid><description/></item><item><title>Java 循环结构</title><link>https://gaoboy.com/post/java-loop-structure/</link><pubDate>Sun, 25 Jan 2015 14:19:23 +0800</pubDate><guid>https://gaoboy.com/post/java-loop-structure/</guid><description/></item><item><title>Java 运算符</title><link>https://gaoboy.com/post/java-operator/</link><pubDate>Sun, 25 Jan 2015 14:18:23 +0800</pubDate><guid>https://gaoboy.com/post/java-operator/</guid><description/></item><item><title>Java 修饰符</title><link>https://gaoboy.com/post/java-specifier/</link><pubDate>Sun, 25 Jan 2015 13:58:21 +0800</pubDate><guid>https://gaoboy.com/post/java-specifier/</guid><description/></item><item><title>Java 变量类型</title><link>https://gaoboy.com/post/java-variable-type/</link><pubDate>Sun, 25 Jan 2015 13:50:11 +0800</pubDate><guid>https://gaoboy.com/post/java-variable-type/</guid><description/></item><item><title>Java 基本数据类型</title><link>https://gaoboy.com/post/java-basic-data-type/</link><pubDate>Sun, 25 Jan 2015 13:40:11 +0800</pubDate><guid>https://gaoboy.com/post/java-basic-data-type/</guid><description/></item><item><title>Java 对象和类</title><link>https://gaoboy.com/post/java-object-class/</link><pubDate>Sun, 25 Jan 2015 13:30:10 +0800</pubDate><guid>https://gaoboy.com/post/java-object-class/</guid><description/></item><item><title>Java 基础语法</title><link>https://gaoboy.com/post/java-basic-grammar/</link><pubDate>Sun, 25 Jan 2015 13:25:10 +0800</pubDate><guid>https://gaoboy.com/post/java-basic-grammar/</guid><description/></item><item><title>计算机语言的发展史</title><link>https://gaoboy.com/post/computer-language-introduction/</link><pubDate>Sat, 24 Jan 2015 16:25:10 +0800</pubDate><guid>https://gaoboy.com/post/computer-language-introduction/</guid><description/></item><item><title>计算机的发展历程</title><link>https://gaoboy.com/post/computer-introduction/</link><pubDate>Fri, 23 Jan 2015 13:25:40 +0800</pubDate><guid>https://gaoboy.com/post/computer-introduction/</guid><description/></item><item><title>虚拟机安装ubuntu及其配置</title><link>https://gaoboy.com/post/vm-ubuntu-install-setting/</link><pubDate>Sun, 26 Jan 2014 10:20:32 +0800</pubDate><guid>https://gaoboy.com/post/vm-ubuntu-install-setting/</guid><description/></item><item><title>Linux 简介</title><link>https://gaoboy.com/post/linux-introduction/</link><pubDate>Sat, 25 Jan 2014 10:05:00 +0800</pubDate><guid>https://gaoboy.com/post/linux-introduction/</guid><description/></item><item><title>Hello World</title><link>https://gaoboy.com/post/hello-world/</link><pubDate>Tue, 12 Feb 2013 23:00:38 +0800</pubDate><guid>https://gaoboy.com/post/hello-world/</guid><description/></item></channel></rss>